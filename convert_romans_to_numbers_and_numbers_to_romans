Create a function that will take either a string containing a roman numeral, or an integer.
Given a string, return the integer value of that roman numeral.
Given an integer, return the equivalent roman numeral.
Symbols to Values
I ➞ 1
V ➞ 5
X ➞ 10
L ➞ 50
C ➞ 100
D ➞ 500
M ➞ 1000
Examples
roman_numerals("V") ➞ 5
roman_numerals("IV") ➞ 4
roman_numerals("CII") ➞ 102
roman_numerals(45) ➞ "XLV"
roman_numerals(1666) ➞ "MDCLXVI"
Notes
Numerical and Roman Numeral inputs will be positive numbers between 1 and 9999.

Solution
--------
#Converting number to romans
def to_romans(number=self, result="")
    roman_mapping = {
      1000 => "M",
      900 => "CM",
      500 => "D",
      400 => "CD",
      100 => "C",
      90 => "XC",
      50 => "L",
      40 => "XL",
      10 => "X",
      9 => "IX",
      5 => "V",
      4 => "IV",
      1 => "I"
    }
    
    return result if number == 0
    roman_mapping.keys.each do |divisor|
        quotient, modulus = number.divmod(divisor)
        result << roman_mapping[divisor] * quotient
        return to_romans(modulus, result) if quotient > 0
    end
end

#converting romans to numerals
def roman_numerals(arg)
    romans = {"I" => 1,
			"V" => 5,
			"X" => 10,
			"L" => 50,
			"C" => 100,
			"D" => 500,
			"M" => 1000
	  }
	
    max_val,sum = 0, 0
    arg.chars.each do |elem|
      if romans[elem] > max_val
        sum = romans[elem] - sum
      else
        sum += romans[elem]
      end
      max_val = romans[elem]
    end
    return sum
end
